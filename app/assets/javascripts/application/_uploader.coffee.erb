(($) ->

  ###
  Uploader jQuery Plugins
  ###

  $.fn.addDanger = ->
    @addClass('bg-danger')
  $.fn.removeDanger = ->
    @removeClass('bg-danger')

  $.fn.getUploadId = ->
    parseInt(@data('upload-id'))
  $.fn.getThumbnail = ->
    @find('[v-thumbnail]')
  $.fn.getRemoveButton = ->
    @find('[v-remove-button]')
  $.fn.getProgressBar = ->
    @find('[v-progress-bar]')

  $.fn.markAsComplete = ->
    @addClass('upload-item-complete')

  $.fn.setProgress = (percentage) ->
    progress = parseInt(percentage)
    progress = 0 if isNaN(progress) || progress < 0
    $progressBar = @getProgressBar()
    $progressBar.attr('aria-valuenow', progress)
    $progressBar.attr('style', "width: #{progress}%;")

  $.fn.setTitle = (title) ->
    @find('[v-title]').text(title)
    return @

  $.fn.setupRemoveButton = (uploader) ->
    @getRemoveButton().on 'click', ((e) =>
      e.preventDefault()

      removeUpload = (uploadId) ->
        upload = uploader.getUploads({ id: uploadId })
        if upload.status == qq.status.UPLOAD_SUCCESSFUL or
           upload.status == qq.status.DELETE_FAILED
          uploader.deleteFile(uploadId)
        else if upload.status == qq.status.UPLOADING or
                upload.status == qq.status.CANCELED
          uploader.cancel(uploadId)

      uploadId = @getUploadId()
      removeUpload(uploadId)
      thumbnails = uploader.getUploads().filter((item) ->
        item.parentId == uploadId
      )
      removeUpload(thumbnail.id) for thumbnail in thumbnails

      return false
    )
    return @

  $.fn.setupThumbnail = (uploader) ->
    $thumbnail = @getThumbnail()
    $thumbnail.on 'load', (=>
      # only display originals
      # workaround to fix scaling.hideScaled = true
      @show() if uploader.getParentId(@getUploadId()) == null
    )
    uploadId = @getUploadId()
    img = $thumbnail.get(0)

    uploader.drawThumbnail(uploadId, img, <%= PhotoService.thumbnail_size %>, false, (resizeInfo) ->
      new Promise((resolve, reject) ->
        options =
          unsharpAmount: 80
          unsharpRadius: 0.6
          unsharpThreshold: 2
        pica().resize(resizeInfo.sourceCanvas, resizeInfo.targetCanvas, options).then(resolve, reject)
      )
    )
    return @

  ###
  Application
  ###

  app = undefined
  app = window.Emporium or (window.Emporium = {})
  app._uploader =

    ###
    Uploader
    ###

    uploader_findItem: (uploadId) ->
      @uploader_items ||= {}
      $item = @uploader_items[uploadId] || $("#upload_item_#{uploadId}")
      @uploader_items[uploadId] ||= $item if $item.length > 0
      return $item

    uploader_createItem: (uploadId, name) ->
      @uploader_itemTemplate ||= $('#upload-item-template').html()
      @$uploader_itemContainer ||= $('#upload-items')
      @$uploader_itemContainer.append(@uploader_itemTemplate.replace(/{{uploadId}}/g, uploadId))
      return @uploader_findItem(uploadId)

    uploader_uploadStart: (uploadId, filename) ->
      $item = @uploader_findItem(uploadId)
      # retry
      if $item.length > 0
        $item.getProgressBar().removeDanger()
      # new upload
      else
        $item = @uploader_createItem(uploadId)
          .setTitle(filename)
          .setupRemoveButton(@uploader)
          .setupThumbnail(@uploader)
        @uploader.setParams(@uploader_requestParams(), uploadId)
      return true

    uploader_uploadProgress: (uploadId, percentage) ->
      $item = @uploader_findItem(uploadId)
      $item.setProgress(percentage)

    uploader_thumbnailsUploadComplete: (uploadId) ->
      thumbnails = @uploader.getUploads().filter((item) ->
        item.parentId == uploadId
      )
      uploadedThumbnails = thumbnails.filter((item) ->
        item.status == qq.status.UPLOAD_SUCCESSFUL
      )
      return thumbnails.length == uploadedThumbnails.length

    uploader_uploadComplete: (uploadId) ->
      upload = @uploader.getUploads(id: uploadId)
      upload = @uploader.getUploads(id: upload.parentId) if upload.parentId
      if upload.status == qq.status.UPLOAD_SUCCESSFUL and @uploader_thumbnailsUploadComplete(upload.id)
        $item = @uploader_findItem(upload.id)
        $item.markAsComplete()
      # retry all on the queue if a upload was completed successfully
      @uploader_retryAll()
      return true

    uploader_uploadError: (uploadId) ->
      $item = @uploader_findItem(uploadId)
      $item.getProgressBar().addDanger()
      return true

    uploader_uploadCancelOrDelete: (uploadId) ->
      upload = @uploader.getUploads(id: uploadId)
      if upload.status == qq.status.UPLOADING or
         upload.status == qq.status.CANCELED
        $item = @uploader_findItem(uploadId)
        $item.hide() if $item.is(':visible')
      return true

    uploader_uploadDeleteComplete: (uploadId) ->
      upload = @uploader.getUploads(id: uploadId)
      if upload.status == qq.status.DELETED
        $item = @uploader_findItem(uploadId)
        $item.hide() if $item.is(':visible')
      return true

    # https://blog.fineuploader.com/2013/08/16/fine-uploader-s3-upload-directly-to-amazon-s3-from-your-browser/#client-side-integration
    uploader: (_config) ->
      @uploader_requestParams = _config.requestParams
      @uploader = new qq.s3.FineUploaderBasic
        debug: <%= Rails.env.development? %>
        button: _config.uploadButton
        request:
          endpoint: "<%= StorageService.endpoint %>"
          accessKey: "<%= StorageService.access_key_id %>"
        objectProperties:
          key: (fileId) =>
            filename = @uploader.getName(fileId)
            uuid = @uploader.getUuid(fileId)
            ext = filename.substr(filename.lastIndexOf('.') + 1)
            "photos/#{uuid}.#{ext}"
        signature:
          endpoint: '/uploads/sign'
          version: 4
        uploadSuccess:
          endpoint: '/photos'
        deleteFile:
          enabled: true
          endpoint: '/photos'
        retry:
          enabledAuto: true
        resume:
          enabled: true
        chunking:
          enabled: true
          partSize: 5242880
          # Upload big chunks one at time. In case of failure, just one chunk will be lost
          # concurrent:
          #   enabled: true
        # paste:
        #   targetElement: element
        #   promptForName: true
        validation:
          allowedExtensions: ["jpeg", "jpg"]
          acceptFiles: "image/jpeg"
        scaling:
          sizes: <%= PhotoService.uploader_sizes.to_json %>
          customResizer: (resizeInfo) ->
            new Promise((resolve, reject) ->
              options =
                unsharpAmount: 80
                unsharpRadius: 0.6
                unsharpThreshold: 2
              pica().resize(resizeInfo.sourceCanvas, resizeInfo.targetCanvas, options).then((result) ->
                
                ## Only apply watermark if resized image is larger than a certain value
                watermarkThreshold = <%= PhotoService::WATERMARK_THRESHOLD %>
                if result.width >= watermarkThreshold
                  ctx=result.getContext('2d')
                  wmImg = document.getElementById('watermark').querySelector('img')
                  ctx.drawImage(wmImg, 0, 0, wmImg.width, wmImg.height, 0, 0, result.width, result.height)

                resolve()
              , reject)
            )
          # # not working
          # # workaround: @show() if uploader.getParentId(@getUploadId()) == null
          # hideScaled: true
        callbacks:
          onProgress: (uploadId, name, uploadedBytes, totalBytes) =>
            @uploader_uploadProgress(uploadId, uploadedBytes/totalBytes*100)
          onUpload: (uploadId, name) =>
            @uploader_uploadStart(uploadId, name)
          onComplete: (uploadId, name, responseJSON, xhr) =>
            if responseJSON['success']
              @uploader_uploadComplete(uploadId)
            else
              @uploader_uploadError(uploadId)
          onError: (uploadId, name, errorReason, xhr) =>
            @uploader_uploadError(uploadId)
          onCancel: (uploadId) =>
            @uploader_uploadCancelOrDelete(uploadId)
          onDelete: (uploadId) =>
            @uploader_uploadCancelOrDelete(uploadId)
          onDeleteComplete: (uploadId, xhr, isError) =>
            @uploader_uploadDeleteComplete(uploadId)
          onError: (uploadId, name, errorReason, xhr) =>
            @uploader_uploadError(uploadId)
          onStatusChange: (uploadId, oldStatus, newStatus) =>
            if newStatus == qq.status.UPLOAD_FAILED
              @uploader_addToRetryQueue(uploadId)

      @uploader_initializeRetryQueue()

    ###
    Retry Queue
    ###

    uploader_addToRetryQueue: (uploadId) ->
      @uploader_retryQueue.push(uploadId)

    uploader_retryUpload: ->
      uploadId = @uploader_retryQueue.shift()
      @uploader.retry(uploadId) unless uploadId == undefined
      setTimeout (=>
        @uploader_monitorRetryQueue()
      ), 5000

    uploader_monitorRetryQueue: ->
      setTimeout (=>
        @uploader_retryUpload()
      ), 5000

    uploader_retryAll: ->
      @uploader.retry(@uploader_retryQueue.shift()) while @uploader_retryQueue.length > 0

    uploader_initializeRetryQueue: ->
      @uploader_retryQueue = []
      @uploader_monitorRetryQueue()

  app._uploader
) jQuery
