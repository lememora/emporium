(($) ->
  app = undefined
  app = window.Emporium or (window.Emporium = {})
  app.uploads =
    initialize: ->
      console.log('initialized') if <%= Rails.env.development? %>

    totalProgressUpdate: (percentage) ->
      progress = parseInt(percentage)
      @$totalProgress ||= $('#uploader-total-progress')
      @$totalProgressBar ||= @$totalProgress.find('[data-progress-bar]')

      if @$totalProgress.hasClass('invisible')
        @$totalProgress.removeClass('invisible')
      if progress > 99
        @$totalProgress.addClass('invisible')

      @$totalProgressBar.attr('aria-valuenow', progress)
      @$totalProgressBar.attr('style', "width: #{progress}%;")
      @$totalProgressBar.text("#{progress}%")

    drawThumbnail: (id, img) ->
      # @uploader.drawThumbnail(id, img, 350, false)
      @uploader.drawThumbnail(id, img, 350, false, (resizeInfo) ->
        new Promise((resolve, reject) ->
          options =
            unsharpAmount: 80
            unsharpRadius: 0.6
            unsharpThreshold: 2
          pica.WEBGL = true
          pica.debug = console.log.bind(console) if <%= Rails.env.development? %>
          pica.resizeCanvas resizeInfo.sourceCanvas, resizeInfo.targetCanvas, options, resolve
        )
      )

    uploadStart: (id, name) ->
      @uploadItemCount ||= 0
      @uploadItemTemplate ||= $('#upload-item-template').html()
      @$uploadRowTemplate ||= $('#upload-row-template')
      @uploadRowTemplate ||= @$uploadRowTemplate.html()
      @uploadRowSpacingClass ||= @$uploadRowTemplate.data('spacing-class')
      @uploadRowColumnCount ||= @$uploadRowTemplate.find('[data-column]').length
      @$uploadItems ||= $('#upload-items')
      uploadItemCol = @uploadItemCount % @uploadRowColumnCount
      uploadItemRow = parseInt(@uploadItemCount / @uploadRowColumnCount)

      if uploadItemCol == 0
        @$uploadItems.append(@uploadRowTemplate)

      $row = @$uploadItems.find('[data-row]').eq(uploadItemRow)
      $col = $row.find('[data-column]').eq(uploadItemCol)

      if uploadItemRow > 0
        $row.addClass(@uploadRowSpacingClass)

      $col.append(@uploadItemTemplate)

      # update card
      $card = $col.find('[data-card]')
      $card.attr('id', "upload-item-#{id}")
      $card.find('[data-title]').text(name)
      $card.removeClass('invisible')
      @drawThumbnail(id, $card.find('img').get(0))

      @uploadItemCount++
      return true

    uploadComplete: (id) ->
      $card = $("#upload-item-#{id}")
      $card.find('[data-loading]').addClass('invisible')
      $destroyButton = $card.find('[data-destroy]')
      $destroyButton.removeAttr('disabled')
      $destroyButton.data('upload-item-id', id)
      $destroyButton.on('click', (e) =>
        @uploader.deleteFile($(e.currentTarget).data('upload-item-id'))
        return false
      )
      return true

    uploadError: (id) ->
      $card = $("#upload-item-#{id}")
      $card.find('[data-loading]').remove()
      $card.find('[data-error]').removeClass('invisible')
      return true

    uploadDeleteStart: (id) ->
      $card = $("#upload-item-#{id}")
      $card.find('[data-loading]').removeClass('invisible')
      $card.find('[data-destroy]').addClass('invisible')
      return true

    uploadDeleteComplete: (id) ->
      $card = $("#upload-item-#{id}")
      $card.find('[data-loading]').addClass('invisible')
      $card.css('opacity', '0.5')
      return true

    # https://blog.fineuploader.com/2013/08/16/fine-uploader-s3-upload-directly-to-amazon-s3-from-your-browser/#client-side-integration
    initializeUploader: (element) ->
      @uploader = new qq.s3.FineUploaderBasic
        debug: <%= Rails.env.development? %>
        button: document.getElementById('uploader-select-files')
        # element: element
        request:
          endpoint: "https://<%= ENV.fetch('AWS_BUCKET') %>.s3.amazonaws.com"
          accessKey: "<%= ENV.fetch('AWS_ACCESS_KEY_ID') %>"
        objectProperties:
          key: (fileId) =>
            filename = @uploader.getName(fileId)
            uuid = @uploader.getUuid(fileId)
            ext = filename.substr(filename.lastIndexOf('.') + 1)
            "uploads/#{uuid}.#{ext}"
        signature:
          endpoint: '/uploads/sign'
          version: 4
        uploadSuccess:
          endpoint: '/uploads'
        deleteFile:
          enabled: true
          endpoint: '/uploads'
        retry:
          enabledAuto: true
        resume:
          enabled: true
        chunking:
          enabled: true
          partSize: 5242880
          concurrent:
            enabled: true
        # paste:
        #   targetElement: element
        #   promptForName: true
        validation:
          allowedExtensions: ["jpeg", "jpg"]
          acceptFiles: "image/jpeg"
          sizeLimit: 50000000, # 50mb
          itemLimit: 200
        callbacks:
          # individual files
          # onProgress: (id, name, uploadedBytes, totalBytes) ->
          #   console.log("uploaded #{uploadedBytes} of #{totalBytes}")
          onTotalProgress: (totalUploadedBytes, totalBytes) =>
            @totalProgressUpdate(totalUploadedBytes/totalBytes*100)
          onUpload: (id, name) =>
            @uploadStart(id, name)
          onComplete: (id, name, responseJSON, xhr) =>
            if responseJSON['success'] then @uploadComplete(id) else @uploadError(id)
          onError: (id, name, errorReason, xhr) =>
            @uploadError(id)
          onDelete: (id) =>
            @uploadDeleteStart(id)
          onDeleteComplete: (id, xhr, isError) =>
            @uploadDeleteComplete(id)


    initializeForm: ->
      @initializeUploader(document.getElementById('uploader'))

    new: ->
      @initializeForm()

  app.uploads
) jQuery
